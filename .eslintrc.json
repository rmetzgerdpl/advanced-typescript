{
	"env": {
		"browser": true,
		"es2021": true,
		"node": true
	},
	"ignorePatterns": ["dist", "node_modules", "*.spec.ts", ".eslintrc.js"],
	"extends": [
		"eslint:recommended",
		"plugin:@typescript-eslint/eslint-recommended",
		"plugin:@typescript-eslint/recommended",
		"plugin:security/recommended"
	],
	"parser": "@typescript-eslint/parser",
	"parserOptions": {
		"ecmaVersion": 12,
		"sourceType": "module"
	},
	"plugins": [
		"@typescript-eslint",
		"security",
		"unused-imports"
	],
	"rules": {
		"@typescript-eslint/ban-types": [
			"error",
			{
				"types": {
					"String": {
						"message": "Use string instead",
						"fixWith": "string"
					},
					"Boolean": {
						"message": "Use boolean instead",
						"fixWith": "boolean"
					},
					"Number": {
						"message": "Use number instead",
						"fixWith": "number"
					},
					"Symbol": {
						"message": "Use symbol instead",
						"fixWith": "symbol"
					},
					"Function": {
						"message": "The `Function` type accepts any function-like value.\nIt provides no type safety when calling the function, which can be a common source of bugs.\nIt also accepts things like class declarations, which will throw at runtime as they will not be called with `new`.\nIf you are expecting the function to accept certain arguments, you should explicitly define the function shape."
					},
					"Object": {
						"message": "The `Object` type actually means 'any non-nullish value', so it is marginally better than `unknown`.\n- If you want a type meaning 'any object', you probably want `Record<string, unknown>` instead.\n- If you want a type meaning 'any value', you probably want `unknown` instead."
					}
				},
				"extendDefaults": false
			}
		],
		"@typescript-eslint/consistent-type-definitions": "error",
		"@typescript-eslint/explicit-member-accessibility": [
			"off",
			{
				"accessibility": "explicit"
			}
		],
		"@typescript-eslint/explicit-module-boundary-types": ["off"],
		"@typescript-eslint/indent": [
			"error",
			"tab"
		],
		"@typescript-eslint/member-delimiter-style": [
			"error",
			{
				"multiline": {
					"delimiter": "semi",
					"requireLast": true
				},
				"singleline": {
					"delimiter": "semi",
					"requireLast": false
				}
			}
		],
		"@typescript-eslint/member-ordering": "off",
		"@typescript-eslint/naming-convention": "off",
		"@typescript-eslint/no-empty-function": "off",
		"@typescript-eslint/no-empty-interface": "error",
		"@typescript-eslint/no-explicit-any": "off",
		"@typescript-eslint/no-inferrable-types": [
			"error",
			{
				"ignoreParameters": true
			}
		],
		"@typescript-eslint/no-misused-new": "error",
		"@typescript-eslint/no-namespace": "off",
		"@typescript-eslint/no-non-null-assertion": "error",
		"@typescript-eslint/no-shadow": [
			"error",
			{
				"hoist": "all"
			}
		],
		"@typescript-eslint/no-unused-expressions": "off",
		"@typescript-eslint/no-unused-vars": "off",
		"@typescript-eslint/no-use-before-define": "off",
		"@typescript-eslint/prefer-function-type": "error",
		"@typescript-eslint/prefer-namespace-keyword": "off",
		"@typescript-eslint/quotes": [
			"error",
			"single",
			{
				"allowTemplateLiterals": true
			}
		],
		"@typescript-eslint/semi": [
			"error",
			"always"
		],
		"@typescript-eslint/type-annotation-spacing": "error",
		"@typescript-eslint/unified-signatures": "error",
		"security/detect-non-literal-fs-filename": "off",
		"security/detect-non-literal-regexp": "off",
		"security/detect-object-injection": "off",
		"arrow-body-style": ["off", "as-needed"],
		"brace-style": [
			"error",
			"1tbs"
		],
		"constructor-super": "error",
		"curly": "error",
		"eol-last": "off",
		"eqeqeq": [
			"error",
			"smart"
		],
		"guard-for-in": "off",
		"id-blacklist": "off",
		"id-match": "off",
		"max-len": [
			"off",
			{
				"code": 140
			}
		],
		"new-parens": "error",
		"no-bitwise": "error",
		"no-caller": "error",
		"no-cond-assign": "error",
		"no-console": [
			"error",
			{
				"allow": [
					"log",
					"warn",
					"dir",
					"timeLog",
					"assert",
					"clear",
					"count",
					"countReset",
					"group",
					"groupEnd",
					"table",
					"dirxml",
					"error",
					"groupCollapsed",
					"Console",
					"profile",
					"profileEnd",
					"timeStamp",
					"context"
				]
			}
		],
		"no-debugger": "error",
		"no-empty": "off",
		"no-eval": "error",
		"no-fallthrough": "error",
		"no-multi-spaces": "error",
		"no-new-wrappers": "error",
		"no-prototype-builtins": "error",
		"no-restricted-imports": "error",
		"no-return-await": "error",
		"no-throw-literal": "error",
		"no-trailing-spaces": [
			"error",
			{
				"ignoreComments": true,
				"skipBlankLines": true
			}
		],
		"no-undef-init": "error",
		"no-underscore-dangle": "off",
		"no-unused-labels": "error",
		"no-useless-escape": "off",
		"no-var": "error",
		"prefer-const": "off",
		"quotes": [
			"off"
		],
		"radix": "error",
		"semi-spacing": "error",
		"space-before-blocks": "error",
		"space-infix-ops": "error",
		"space-unary-ops": "error",
		"spaced-comment": [
			"off",
			"always",
			{
				"markers": [
					"/"
				]
			}
		],
		"unused-imports/no-unused-imports": "error"

	}
}